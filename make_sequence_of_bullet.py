# -*- coding: utf-8 -*-
"""make sequence of bullet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SwCO4vC6slhZtOopODqoW7aWn-vSplLI
"""

import json
with open('indexes.json', 'r') as fp:
    indexes = json.load(fp)

indexes


class Node:
    def __init__(self):
        self.nodes = []
        self.data = ''
        self.count = 0

    def countNodes(self):
        self.count = len(self.nodes)

    def addData(self, data):
        self.data = data

    def addChild(self, bullet):
        if self.countNodes == 0:
            newNode = Node()
            newNode.addData(bullet)
            self.nodes.append(newNode)
            self.countNodes()
        else:
            self.pushNode(bullet, self.nodes, 0, '.')

    def pushNode(self, bullet, nodeList, level, sep='.'):
        lev = self.getLevel(bullet, sep, level)
        if lev != '':
            node = ''
            print("37", self.count, level)
            if self.count != 0:
                for n in nodeList:
                    if n.data == lev:
                        n.pushNode(bullet, n.nodes, level+1, sep)
                        return
                    else:
                        print("49")
                        newNode = Node()
                        newNode.addData(bullet)
                        self.nodes.append(newNode)
                        self.countNodes()
                        return
            else:
                print("55")
                newNode = Node()
                newNode.addData(bullet)
                self.nodes.append(newNode)
                self.countNodes()
        else:
            print("61")
            newNode = Node()
            newNode.addData(bullet)
            self.nodes.append(newNode)
            self.countNodes()

    def printData(self, s):
        if self.count > 0:
            for n in self.nodes:
                s += 'Node Data: '+n.data
                n.printData(s)
        else:
            return s

    def printAll(self):
        s = 'Node Data: '+self.data
        s = self.printData(s)
        print(s)
        return s

    def getData(self):
        return self.data

    def getNodes(self):
        return self.nodes

    def getLevel(self, bullet, sep, level=0):
        end = False
        if bullet[-len(sep)] == sep:
            end = True
        bul = bullet.split(sep)
        if level < len(bul):
            if end:
                return bul[level]+sep
            else:
                return bul[level]
        return ''


head = Node()
head.addData('/')
i = 0
for val in indexes.values():
    for v in val:
        head.addChild(v[2])
    i += 1
    if i == 10:
        break

# print(head.printAll())
